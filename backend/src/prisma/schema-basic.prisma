// Basic Prisma schema for initial setup
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(255)
  type        String?  @db.VarChar(100)
  description String?  @db.Text
  industry    String?  @db.VarChar(100)
  country     String?  @db.VarChar(100)
  website     String?  @db.VarChar(255)
  settings    Json     @default("{}") @db.JsonB
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  userOrganizations UserOrganization[]

  @@map("organizations")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique @db.VarChar(255)
  passwordHash String?   @map("password_hash") @db.VarChar(255)
  firstName    String?   @map("first_name") @db.VarChar(100)
  lastName     String?   @map("last_name") @db.VarChar(100)
  phone        String?   @db.VarChar(50)
  preferences  Json      @default("{}") @db.JsonB
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamptz(6)
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  userOrganizations UserOrganization[]

  @@map("users")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  permissions Json     @default("[]") @db.JsonB
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  userOrganizations UserOrganization[]

  @@map("roles")
}

model UserOrganization {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  roleId         String   @map("role_id") @db.Uuid
  joinedAt       DateTime @default(now()) @map("joined_at") @db.Timestamptz(6)
  isActive       Boolean  @default(true) @map("is_active")

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@unique([userId, organizationId])
  @@map("user_organizations")
}
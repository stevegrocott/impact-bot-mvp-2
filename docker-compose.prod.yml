services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: impact-bot-postgres-prod
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_production_password_2024}
      POSTGRES_DB: impact_bot_prod
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - impact-bot-prod
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: impact-bot-redis-prod
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - impact-bot-prod
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: impact-bot-backend-prod
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-secure_production_password_2024}@postgres:5432/impact_bot_prod
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-impact_bot_v2_super_secure_jwt_secret_for_production}
      PORT: 3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - impact-bot-prod
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://backend:3003
        REACT_APP_ENV: production
    container_name: impact-bot-frontend-prod
    environment:
      REACT_APP_API_BASE_URL: ${FRONTEND_API_URL:-http://localhost:3003}
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - impact-bot-prod
    restart: unless-stopped

  # Add backup service for production
  backup:
    image: alpine:latest
    container_name: impact-bot-backup-prod
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - postgres_prod_data:/data/postgres:ro
      - redis_prod_data:/data/redis:ro
      - ./database/backups:/backups
    networks:
      - impact-bot-prod
    command: |
      sh -c "
        apk add --no-cache postgresql-client redis &&
        echo '0 2 * * * pg_dump -h postgres -U postgres impact_bot_prod | gzip > /backups/backup_\$(date +%Y%m%d_%H%M%S).sql.gz' | crontab - &&
        crond -f
      "
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  impact-bot-prod:
    driver: bridge